package sintatico;

public interface ParserConstants  {
    int START_SYMBOL = 47;

    int FIRST_NON_TERMINAL    = 47;
    int FIRST_SEMANTIC_ACTION = 79;

    int[][] PARSER_TABLE =
            {
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5,  8,  8,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1,  6,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, 12, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 10, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, 22, 23, -1, -1, 24, 29, -1, 23, 32, -1, 33, 23, 34, 38, -1, -1, -1, 49, -1, 43, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, 25, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, 31, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, 40, 40, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, 52, 54, 55, 53, 56, 57, -1, -1, 51, 51, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, 51, -1, -1, 51, 51, -1, 51, -1, 51, -1, -1, -1, -1, -1, -1, 51, -1, -1 },
                    { -1, 58, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, 60, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1 },
                    { -1, 61, 62, -1, -1, 64, 64, 64, 64, 64, 64, -1, -1, 64, 64, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, 64, -1, -1, 64, 64, -1, 64, -1, 64, -1, -1, 63, -1, -1, -1, 64, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1 },
                    { -1, 66, 66, 67, 68, 66, 66, 66, 66, 66, 66, -1, -1, 66, 66, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, 66, -1, -1, 66, 66, -1, 66, -1, 66, -1, -1, 66, 69, -1, -1, 66, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, 73, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                    { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
            };

    int[][] PRODUCTIONS =
            {
                    {  22,  19, 179,  14,  48,  16, 180 },
                    {  51,  53, 181,  56,  58 },
                    {  19, 183,  78 },
                    {   0 },
                    {  15,  19, 183,  78 },
                    {  23,  19, 184,   6,  20, 185,  14,  52 },
                    {   0 },
                    {  19, 184,   6,  20, 185,  14,  52 },
                    {   0 },
                    {  24, 186,  49,  13,  55,  14,  54 },
                    {   0 },
                    {  49,  13,  55,  14,  54 },
                    {   0 },
                    {  28 },
                    {  25,  19, 187,  57,  14, 188,  48,  14, 189,  56 },
                    {   0 },
                    {   0 },
                    {  17, 190,  49,  13,  28,  18 },
                    {  26,  60,  59,  27 },
                    {   0 },
                    {  14,  60,  59 },
                    {  19, 193,  12,  68, 194 },
                    {  58 },
                    {   0 },
                    {  30,  19, 195,  61, 196 },
                    {   0 },
                    {  17,  68, 197,  62,  18 },
                    {   0 },
                    {  15,  68, 197,  62 },
                    {  31,  68, 199,  32,  60,  63, 200 },
                    {   0 },
                    { 201,  33,  60 },
                    {  34, 202,  68, 203,  35,  60, 204 },
                    {  36, 205,  60,  37,  68, 206 },
                    {  38, 207,  17,  64,  65,  18 },
                    {  19, 208 },
                    {   0 },
                    {  15,  64,  65 },
                    {  39,  17,  66,  67,  18 },
                    {  21, 209 },
                    {  68, 210 },
                    {   0 },
                    {  15,  66,  67 },
                    {  45, 211,  68,  29,  75,  27, 212 },
                    {  20,  77,  13, 213,  60, 214,  76 },
                    {  15, 215,  20,  77 },
                    {   0 },
                    {   0 },
                    {  14,  75 },
                    {  43,  19, 216,  12,  68, 217,  44,  68, 218,  35,  60, 219 },
                    {  70,  69 },
                    {   0 },
                    {   6,  70, 220 },
                    {   9,  70, 221 },
                    {   7,  70, 222 },
                    {   8,  70, 223 },
                    {  10,  70, 224 },
                    {  11,  70, 225 },
                    {   2,  72,  71 },
                    {   3,  72, 226,  71 },
                    {  72,  71 },
                    {   2,  72, 227,  71 },
                    {   3,  72, 228,  71 },
                    {  40,  72, 229,  71 },
                    {   0 },
                    {  74,  73 },
                    {   0 },
                    {   4,  74, 230,  73 },
                    {   5,  74, 231,  73 },
                    {  41,  74, 232,  73 },
                    {  20, 233 },
                    {  17,  68,  18 },
                    {  42,  74, 234 },
                    { 235,  64 }
            };

    String[] PARSER_ERROR =
            {
                    "",
                    "Era esperado fim de programa",
                    "Era esperado \"+\"",
                    "Era esperado \"–\"",
                    "Era esperado \"*\"",
                    "Era esperado \"/\"",
                    "Era esperado \"=\"",
                    "Era esperado \">\"",
                    "Era esperado \">=\"",
                    "Era esperado \"<\"",
                    "Era esperado \"<=\"",
                    "Era esperado \"<>\"",
                    "Era esperado \":=\"",
                    "Era esperado \":\"",
                    "Era esperado \";\"",
                    "Era esperado \",\"",
                    "Era esperado \".\"",
                    "Era esperado \"(\"",
                    "Era esperado \")\"",
                    "Era esperado id",
                    "Era esperado INTEIRO",
                    "Era esperado LIT",
                    "Era esperado PROGRAM",
                    "Era esperado CONST",
                    "Era esperado VAR",
                    "Era esperado PROCEDURE",
                    "Era esperado BEGIN",
                    "Era esperado END",
                    "Era esperado INTEGER",
                    "Era esperado OF",
                    "Era esperado CALL",
                    "Era esperado IF",
                    "Era esperado THEN",
                    "Era esperado ELSE",
                    "Era esperado WHILE",
                    "Era esperado DO",
                    "Era esperado REPEAT",
                    "Era esperado UNTIL",
                    "Era esperado READLN",
                    "Era esperado WRITELN",
                    "Era esperado OR",
                    "Era esperado AND",
                    "Era esperado NOT",
                    "Era esperado FOR",
                    "Era esperado TO",
                    "Era esperado CASE",
                    "Era esperado LITERAL",
                    "<PROGRAMA> inválido",
                    "<BLOCO> inválido",
                    "<LID> inválido",
                    "<REPIDENT> inválido",
                    "<DCLCONST> inválido",
                    "<LDCONST> inválido",
                    "<DCLVAR> inválido",
                    "<LDVAR> inválido",
                    "<TIPO> inválido",
                    "<DCLPROC> inválido",
                    "<DEFPAR> inválido",
                    "<CORPO> inválido",
                    "<REPCOMANDO> inválido",
                    "<COMANDO> inválido",
                    "<PARAMETROS> inválido",
                    "<REPPAR> inválido",
                    "<ELSEPARTE> inválido",
                    "<VARIAVEL> inválido",
                    "<REPVARIAVEL> inválido",
                    "<ITEMSAIDA> inválido",
                    "<REPITEM> inválido",
                    "<EXPRESSAO> inválido",
                    "<REPEXPSIMP> inválido",
                    "<EXPSIMP> inválido",
                    "<REPEXP> inválido",
                    "<TERMO> inválido",
                    "<REPTERMO> inválido",
                    "<FATOR> inválido",
                    "<CONDCASE> inválido",
                    "<CONTCASE> inválido",
                    "<RPINTEIRO> inválido",
                    "<REPID> inválido"
            };
}
